name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
permissions:
  contents: read
jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        go-version: ['1.24']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install just
        uses: extractions/setup-just@v2
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-
      - name: Download dependencies
        run: just init
      - name: Run tests
        run: |
          # Skip tmux-dependent tests in CI
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./... -skip TestTmuxSession
      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          fail_ci_if_error: false
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Install just
        uses: extractions/setup-just@v2
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.24-
            ${{ runner.os }}-go-
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.8
          args: --timeout=5m
      - name: Check formatting
        run: |
          # Use just commands for consistency
          just fmt
          just fmt-yaml
          # Verify no changes were made
          if [ -n "$(git diff --name-only)" ]; then
            echo "Formatting changes detected. Please run 'just fmt fmt-yaml'"
            git diff
            exit 1
          fi
      - name: Check Markdown
        uses: DavidAnson/markdownlint-cli2-action@v18
  build:
    name: Build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24']
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install just
        uses: extractions/setup-just@v2
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-
      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          just build
          # Rename for platform-specific artifact
          mv bin/amux amux${{ matrix.os == 'windows-latest' && '.exe' || '' }}
      - name: Test binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          ./amux version || true
          ./amux --help
      - name: Test binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\amux.exe version
          .\amux.exe --help
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: amux-${{ matrix.goos }}-${{ matrix.goarch }}
          path: amux${{ matrix.os == 'windows-latest' && '.exe' || '' }}
